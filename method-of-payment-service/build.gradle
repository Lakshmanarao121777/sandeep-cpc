buildscript {
    ext {
        springBootVersion = '2.7.2'
    }
    repositories {
        mavenLocal()
        maven {
            url "${artifactory_url}/plugins-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "${artifactory_url}/libs-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'maven'
    id 'maven-publish'
    id 'project-report'
    id 'org.springframework.boot' version '2.7.4'
    id 'com.jfrog.artifactory' version '4.20.0'
    id 'org.barfuin.gradle.taskinfo' version '1.0.5'
    id 'xsp.gradle.serviceinfo' version '2.0.0'
    id 'org.sonarqube' version '4.0.0.2929'
    //Add Testing Plugins as Needed
    id 'xsp.gradle.test.functional' version '2.0.0'
    id 'xsp.gradle.test.e2e' version '1.3.0'
    id 'xsp.gradle.test.contract' version '2.0.0'
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
compileJava.getOptions().setEncoding("UTF-8")
compileTestJava.getOptions().setEncoding("UTF-8")

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

if (project.hasProperty('releaseVersion')) {
    project.version = project.releaseVersion
} else {
    project.version = getGitHash()
}
setGroup("com.comcast.cable.cxt.payment.methodofpayment")
setVersion(version)

bootJar {
    archiveBaseName.set(rootProject.getName())
    archiveVersion.set(rootProject.getVersion())
    doFirst {
        manifest {
            attributes(
                'Gradle-Version': "${gradle.gradleVersion}",
                'JVM-Version': "${System.properties['java.runtime.version']} (${System.properties['java.vm.vendor']})",
                'Project-Vendor': "Comcast",
                'Project-Name': "${project.name}",
                'Project-Version': "${project.version}",
                'Git-URL': "https://github.comcast.com/common-payment/${project.name}",
                'Framework-Title': 'XSP Cloud Framework',
                'Framework-Version': '4.0.0',
                'Framework-Vendor': 'XSP Core Team',
                'Class-Path': project.ext.manifestClassPath
            )
        }
    }
}

bootRun {
    main = "com.comcast.cable.cxt.payment.methodofpayment.MethodOfPaymentServiceApplication"
    sourceResources sourceSets.main
    systemProperties = System.properties
    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
}

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.springframework.cloud", module:"spring-cloud-function-context"
    exclude group: "org.yaml", module: "snakeyaml"
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'com.beust' && details.requested.name == 'jcommander') {
            details.useVersion '1.75'
        }
        if (details.requested.group == 'com.fasterxml.jackson.core' && details.requested.name == 'jackson-databind') {
            details.useVersion '2.14.0-rc2'
        }
        if (details.requested.group == 'com.fasterxml.woodstox' && details.requested.name == 'woodstox-core') {
            details.useVersion '5.4.0'
        }
        if (details.requested.group == 'commons-collections' && details.requested.name == 'commons-collections') {
            details.useVersion '3.2.2'
        }
        if (details.requested.group == 'io.netty' && details.requested.name == 'netty-all') {
            details.useVersion '4.1.84.Final'
        }
        if (details.requested.group == 'io.netty' && details.requested.name == 'netty-codec') {
            details.useVersion '4.1.84.Final'
        }
        if (details.requested.group == 'io.netty' && details.requested.name == 'netty-codec-http') {
            details.useVersion '4.1.84.Final'
        }
        if (details.requested.group == 'net.minidev' && details.requested.name == 'json-smart') {
            details.useVersion '2.4.9'
        }
        if (details.requested.group == 'org.apache.ant' && details.requested.name == 'ant') {
            details.useVersion '1.10.11'
        }
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion '2.19.0'
        }
        if (details.requested.group == 'org.apache.santuario' && details.requested.name == 'xmlsec') {
            details.useVersion '2.1.7'
        }
        if (details.requested.group == 'org.apache.tomcat' && details.requested.name == 'tomcat-catalina') {
            details.useVersion '9.0.58'
        }
        if (details.requested.group == 'org.apache.tomcat.embed' && details.requested.name == 'tomcat-embed-core') {
            details.useVersion '9.0.70'
        }
        if (details.requested.group == 'org.cryptacular' && details.requested.name == 'cryptacular') {
            details.useVersion '1.1.4'
        }
        if (details.requested.group == 'org.testng' && details.requested.name == 'testng') {
            details.useVersion '7.7.0'
        }
        if (details.requested.group == 'org.yaml' && details.requested.name == 'snakeyaml') {
            details.useVersion '1.33'
        }
        if (details.requested.group == 'org.springframework' && details.requested.name == 'spring-webmvc') {
            details.useVersion '5.3.26'
        }
        if (details.requested.group == 'org.springframework.cloud' && details.requested.name == 'spring-cloud-netflix-hystrix-dashboard') {
            details.useVersion '2.2.10.RELEASE'
        }
        if (details.requested.group == 'org.springframework.security' && details.requested.name == 'spring-security-web') {
            details.useVersion '5.5.7'
        }
//        if (details.requested.group == 'org.springframework.cloud' && details.requested.name == 'spring-cloud-starter-stream-rabbit') {
//            details.useVersion '3.2.5'
//        }
    }
}

allprojects {
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute(module('org.apache.velocity:velocity')).with(module('org.apache.velocity:velocity-engine-core:2.3'))
                substitute(module('org.codehaus.jackson:jackson-mapper-asl')).with(module('com.fasterxml.jackson.core:jackson-databind:2.14.0-rc2'))
            }
        }
    }
}

dependencies {
    implementation("com.comcast.xsp:xsp-boot:[4.4.0,4.5.0)")
    implementation('org.springframework.boot:spring-boot-starter'){
        exclude module : 'spring-boot-starter-logging'
    }
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap:3.0.5")
    implementation('io.swagger.core.v3:swagger-models:2.1.10')
    implementation('com.google.code.gson:gson:2.9.0')
    //Include only when developing your service, remove when ready for deployment
    //implementation("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    compileOnly('org.projectlombok:lombok:1.18.22')
    annotationProcessor('org.projectlombok:lombok:1.18.22')
    testCompileOnly('org.projectlombok:lombok:1.18.22')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.22')

    testImplementation('junit:junit:4.13.2')
    testImplementation("org.assertj:assertj-core:3.19.0")
    testImplementation("org.mockito:mockito-core:2.28.2")
    testImplementation("net.javacrumbs.json-unit:json-unit-assertj:2.24.0")
    testImplementation("com.github.stefanbirkner:system-rules:1.19.0")
    testImplementation("com.github.stefanbirkner:system-rules:1.19.0")
}

repositories {
    mavenLocal()
    maven {url "https://nexus.comcast.com/nexus/repository/releases/"}
}

artifactory {
	contextUrl = "${artifactory_url}"
	resolve {
		repository {
			repoKey = 'libs-release'
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true
		}
	}
}

wrapper {
    gradleVersion = '6.8.1'
    distributionUrl = distributionUrl.replace("bin", "all")
}

sonar {
  properties {
    property("sonar.host.url", "${sonar_host_url}")
    property("sonar.login", "${sonar_user}")
  }
}

